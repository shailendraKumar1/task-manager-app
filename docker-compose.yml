version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: task-manager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: task_db
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - task-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d task_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Task Manager Application
  task-manager:
    build: .
    container_name: task-manager-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: taskuser
      POSTGRES_PASSWORD: taskpassword
      POSTGRES_DB_NAME: task_db
      
      # Application Configuration
      APP_NAME: TaskManager
      APP_VERSION: 1.0.0
      HOST: 0.0.0.0
      PORT: 8080
      
      # User Service Configuration
      USER_SERVICE_URL: http://user-service:8081
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - task-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Mock User Service (for testing)
  user-service:
    image: wiremock/wiremock:latest
    container_name: mock-user-service
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command: ["--global-response-templating", "--verbose"]
    networks:
      - task-network

volumes:
  postgres_data:
    driver: local

networks:
  task-network:
    driver: bridge
